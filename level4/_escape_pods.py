from collections import defaultdict
entrances = [7, 12, 11]
exits = [5, 29, 25]
path = [[5, 19, 0, 12, 13, 19, 22, 21, 12, 17, 7, 3, 23, 15, 5, 12, 5, 9, 4, 25, 13, 7, 6, 9, 20, 23, 6, 26, 18, 24],
		[8, 19, 7, 27, 27, 8, 20, 9, 3, 6, 20, 15, 8, 1, 26, 0, 2, 20, 22, 4, 0, 8, 10, 5, 13, 8, 22, 25, 19, 12],
		[26, 22, 6, 10, 20, 15, 23, 23, 29, 17, 24, 28, 14, 11, 29, 13, 20, 16, 1, 27, 13, 12, 8, 9, 29, 11, 25, 28, 15, 19],
		[11, 17, 20, 6, 7, 25, 22, 6, 29, 12, 3, 0, 28, 15, 11, 28, 26, 15, 28, 4, 12, 28, 7, 14, 6, 28, 19, 29, 20, 28],
		[26, 24, 26, 29, 25, 3, 12, 11, 12, 7, 23, 26, 7, 27, 22, 18, 11, 24, 25, 24, 7, 21, 1, 1, 15, 5, 11, 14, 6, 8],
		[6, 21, 3, 7, 29, 22, 21, 25, 5, 21, 17, 5, 7, 15, 28, 6, 22, 2, 7, 4, 20, 5, 14, 29, 28, 0, 14, 28, 2, 1],
		[29, 23, 12, 10, 7, 7, 26, 23, 4, 23, 9, 4, 11, 8, 4, 23, 20, 10, 28, 21, 3, 13, 16, 6, 11, 18, 13, 27, 28, 6],
		[17, 7, 6, 7, 29, 0, 14, 6, 24, 8, 26, 16, 15, 2, 22, 22, 12, 18, 18, 16, 18, 10, 28, 16, 28, 21, 9, 19, 11, 19],
		[4, 23, 5, 23, 15, 13, 7, 20, 6, 18, 4, 26, 27, 19, 3, 14, 10, 17, 26, 6, 8, 4, 10, 18, 3, 26, 15, 1, 14, 18],
		[10, 13, 3, 22, 15, 13, 27, 8, 8, 4, 23, 3, 5, 5, 17, 14, 18, 10, 19, 6, 8, 14, 24, 22, 18, 1, 17, 6, 6, 18],
		[12, 25, 18, 10, 23, 7, 26, 15, 11, 20, 27, 26, 29, 12, 28, 21, 4, 11, 6, 15, 24, 2, 25, 15, 25, 13, 29, 2, 20, 20],
		[8, 17, 24, 24, 25, 8, 2, 26, 16, 2, 5, 13, 4, 17, 23, 18, 23, 9, 10, 28, 16, 9, 20, 6, 17, 23, 11, 9, 14, 10],
		[2, 13, 24, 22, 22, 24, 17, 28, 8, 13, 3, 22, 18, 14, 18, 8, 22, 20, 5, 5, 13, 13, 1, 16, 29, 11, 22, 27, 0, 23],
		[0, 16, 9, 23, 21, 9, 18, 4, 21, 7, 15, 13, 24, 26, 19, 21, 12, 4, 10, 6, 15, 11, 24, 13, 2, 26, 0, 3, 6, 2],
		[18, 22, 7, 11, 9, 15, 14, 13, 14, 0, 23, 21, 2, 2, 25, 8, 27, 17, 26, 8, 8, 6, 28, 11, 9, 17, 21, 11, 1, 27],
		[24, 11, 24, 3, 20, 4, 25, 12, 5, 28, 28, 20, 2, 26, 21, 20, 2, 11, 1, 7, 24, 0, 19, 7, 17, 21, 7, 26, 23, 25],
		[3, 4, 19, 3, 6, 11, 25, 22, 21, 11, 11, 10, 12, 26, 4, 28, 2, 23, 28, 17, 6, 22, 5, 29, 13, 25, 18, 8, 0, 18],
		[28, 2, 29, 29, 3, 26, 28, 5, 25, 11, 15, 0, 11, 24, 9, 22, 12, 7, 28, 23, 4, 0, 24, 2, 6, 23, 29, 6, 4, 7],
		[26, 15, 22, 9, 8, 13, 3, 16, 3, 19, 11, 5, 17, 26, 17, 8, 18, 28, 9, 25, 21, 4, 2, 24, 22, 15, 3, 22, 19, 28],
		[9, 13, 1, 0, 12, 9, 9, 11, 28, 7, 12, 9, 10, 19, 0, 22, 6, 29, 0, 22, 23, 24, 7, 15, 20, 15, 24, 17, 0, 4],
		[26, 24, 3, 24, 5, 18, 9, 25, 26, 28, 20, 5, 21, 6, 17, 25, 14, 0, 3, 18, 24, 21, 15, 28, 24, 5, 16, 19, 14, 29],
		[3, 17, 9, 2, 23, 25, 12, 4, 5, 17, 25, 5, 4, 18, 4, 17, 0, 0, 14, 23, 15, 6, 29, 10, 17, 6, 6, 14, 20, 16],
		[1, 12, 26, 26, 23, 9, 26, 17, 4, 3, 8, 25, 21, 24, 16, 18, 15, 0, 12, 0, 15, 3, 0, 18, 29, 19, 3, 21, 11, 12],
		[25, 0, 1, 10, 5, 5, 27, 23, 9, 5, 6, 8, 0, 13, 16, 16, 11, 22, 25, 12, 24, 14, 29, 23, 27, 28, 14, 1, 26, 16],
		[17, 0, 21, 3, 20, 12, 17, 21, 22, 21, 25, 26, 9, 14, 1, 12, 27, 10, 13, 6, 18, 6, 20, 12, 12, 0, 19, 26, 13, 5],
		[27, 17, 16, 26, 23, 27, 19, 10, 18, 22, 2, 16, 1, 24, 2, 1, 19, 13, 14, 22, 9, 15, 21, 0, 10, 14, 9, 18, 26, 25],
		[18, 7, 22, 2, 2, 0, 12, 21, 19, 27, 5, 19, 4, 23, 28, 16, 16, 25, 23, 23, 14, 28, 23, 10, 20, 20, 24, 18, 11, 14],
		[0, 7, 0, 3, 26, 16, 21, 29, 11, 21, 8, 17, 5, 23, 21, 29, 28, 26, 28, 16, 8, 18, 10, 6, 13, 18, 0, 20, 13, 15],
		[21, 9, 14, 12, 10, 4, 5, 19, 13, 11, 29, 17, 0, 7, 14, 16, 7, 7, 10, 27, 8, 22, 3, 3, 11, 9, 5, 15, 28, 3],
		[25, 5, 19, 21, 2, 29, 11, 5, 3, 20, 25, 19, 22, 0, 7, 3, 19, 6, 15, 23, 20, 28, 1, 12, 18, 17, 17, 17, 10, 22]]
def generate_residual(entrances, exits, path):
	capacities = defaultdict(dict)
	for room in range(-1, len(path) + 1):
		capacities[room] = defaultdict(int)

	#supersource
	for entrance in entrances:
		capacities[-1][entrance] = sum(path[entrance])

	#network
	for node, corridors in enumerate(path):
		for i, c in enumerate(corridors):
			if c != 0:
				capacities[node][i] = c

	#supersink
	for exit in exits:
		capacities[exit][len(path)] = sum(path[i][exit] for i in range(len(path)))
	return capacities

def augmented_path(source, sink, residual, route=[]):
	for node in residual[source]:
		if all(node != arc[0] for arc in route) and residual[source][node] > 0:
			if node == sink:
				return True, route + [(source, sink)]
			x = augmented_path(node, sink, residual, route + [(source, node)])
			if x[0]:
				return x
			else:
				continue
	return False, []

def ford_fulkerson(source, sink, residual):
	a, path = augmented_path(source, sink, residual)
	while a:
		print(path)
		pushed_flow = min(residual[i][j] for i, j in path)
		for i, j in path:
			if i < j:
				residual[i][j] -= pushed_flow
				residual[j][i] += pushed_flow
			else:
				residual[i][j] += pushed_flow
				residual[j][i] -= pushed_flow
			if residual[i][j] == 0:
				residual[i].pop(j)
		a, path = augmented_path(source, sink, residual)
	return sum(residual[sink].values())

def answer(entrances, exits, path):
	residual = generate_residual(entrances, exits, path)
	return ford_fulkerson(-1, len(path), residual)

a = answer(entrances, exits, path)
print(a)